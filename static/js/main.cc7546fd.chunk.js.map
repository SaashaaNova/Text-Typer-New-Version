{"version":3,"sources":["TextTyper.js","App.js","serviceWorker.js","index.js"],"names":["TextTyper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startTyping","typeInterval","setInterval","content","_this$state","state","typeOneTime","typeInfinity","currentLetter","counter","arrayOfSentences","match","push","splitSentence","split","start","length","setState","concat","toConsumableArray","textToType","intervalSpeed","delay","interval","_this2","clearTimeout","delayTimer","setTimeout","clearInterval","react_default","a","createElement","className","Component","App","src_TextTyper","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAgGeA,cA5Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA0BRQ,YAAc,WACZP,EAAKQ,aAAeC,YAAY,WAAM,IAE7BC,EAAWV,EAAKD,MAAhBW,QAF6BC,EAQhCX,EAAKY,MAJPC,EAJkCF,EAIlCE,YACAC,EALkCH,EAKlCG,aACAC,EANkCJ,EAMlCI,cACAC,EAPkCL,EAOlCK,QAIEC,EAAmBP,EAAQQ,MAAO,sBACtCD,EAAiBE,KAAK,KACtB,IAAIC,EAAgBH,EAAiBD,GAASK,MAAM,IAC9CC,EAAQF,EAAcL,GAEzBA,IAAkBK,EAAcG,QAAsB,IAAZP,EAC3ChB,EAAKwB,SAAS,CACZX,YAAW,GAAAY,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAMY,GAAN,CAAmBS,IAC9BP,cAAeA,EAAgB,EAC/BY,WAAY,CAACd,KAGfb,EAAKwB,SAAS,CACZV,aAAY,GAAAW,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAMa,GAAN,CAAoBQ,IAChCP,cAAeA,EAAgB,EAC/BY,WAAY,CAACd,EAAaC,KAI1BC,IAAkBK,EAAcG,QAClCvB,EAAKwB,SAAS,CACZR,QAASA,EAAU,EACnBD,cAAe,IAIfC,IAAYC,EAAiBM,OAAS,GAEtCvB,EAAKwB,SAAS,CACZR,QAAS,EACTD,cAAe,EACfD,aAAc,MAKnBd,EAAKY,MAAMgB,gBAxEd5B,EAAKY,MAAQ,CACXe,WAAY,GACZd,YAAa,GACbC,aAAc,GACdE,QAAS,EACTD,cAAe,EACfc,MAAO7B,EAAKD,MAAM8B,MAClBD,cAAe5B,EAAKD,MAAM+B,UAVX9B,mFAcC,IAAA+B,EAAA5B,KAClB6B,aAAa7B,KAAK8B,YAClB9B,KAAK8B,WAAaC,WAAW,WAC3BH,EAAKxB,eACJJ,KAAKS,MAAMiB,sDAIdG,aAAa7B,KAAK8B,YAClBE,cAAchC,KAAKK,+CAwDb,IACAmB,EAAexB,KAAKS,MAApBe,WAEP,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKX,YAtFUa,mBCSTC,MARf,WAIE,OAAQL,EAAAC,EAAAC,cAACI,EAAD,CAAWb,MAAO,EAAGC,SAAU,IAAKpB,QAF1C,+ICMgBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5B,MACvB,2DCZN6B,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cc7546fd.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nclass TextTyper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      textToType: [],\n      typeOneTime: [],\n      typeInfinity: [],\n      counter: 0,\n      currentLetter: 0,\n      delay: this.props.delay,\n      intervalSpeed: this.props.interval,\n    };\n  }\n\n  componentDidMount() {\n    clearTimeout(this.delayTimer);\n    this.delayTimer = setTimeout(() => {\n      this.startTyping();\n    }, this.state.delay);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.delayTimer);\n    clearInterval(this.typeInterval);\n  }\n\n\n  startTyping = () => {\n    this.typeInterval = setInterval(() => {\n\n      const {content} = this.props;\n      const { \n        typeOneTime, \n        typeInfinity, \n        currentLetter, \n        counter,\n      } = this.state;\n\n\n      let arrayOfSentences = content.match( /[^\\.!\\?]+[\\.!\\?]+/g ); \n      arrayOfSentences.push(' ')\n      let splitSentence = arrayOfSentences[counter].split('');\n      const start = splitSentence[currentLetter];\n\n      if(currentLetter !== splitSentence.length && counter === 0) {\n        this.setState({\n          typeOneTime: [...typeOneTime, start],\n          currentLetter: currentLetter + 1,\n          textToType: [typeOneTime]\n        })        \n      } else {\n        this.setState({\n          typeInfinity: [...typeInfinity, start],\n          currentLetter: currentLetter + 1,\n          textToType: [typeOneTime, typeInfinity]\n        })  \n      }\n\n      if (currentLetter === splitSentence.length) {    \n        this.setState({\n          counter: counter + 1,\n          currentLetter: 0,      \n        }) \n      } \n        \n      if (counter === arrayOfSentences.length - 1) {\n        \n          this.setState({\n            counter: 1,\n            currentLetter: 0,\n            typeInfinity: [], \n          })\n        \n      } \n   \n    }, this.state.intervalSpeed)\n  }\n\n\n render() {\n  const { textToType } = this.state;\n\n   return (\n     <div className=\"main-container\">\n       <div className=\"text-container\">\n         <h1>{textToType}</h1>\n       </div>\n     </div>\n   );\n }\n}\n\nexport default TextTyper;\n","import React from 'react';\nimport TextTyper from './TextTyper';\nimport './App.css';\n\nfunction App() {\n  const text = \n    'This is The Text Typer component. It was made to practice Jest and Enzyme testing. It a simply small component to type the text you wish.';\n\n  return (<TextTyper delay={0} interval={100} content={text} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}